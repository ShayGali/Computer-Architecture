// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
 // 0x4000=16384 - 2^14
 // 0x5FFF=24575 - 2^13 -1
 // 0x6000=24576 - 2^14

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=address[15], out=nAddr15);
    And(a=nAddr15, b=load, out=ram16L);
    RAM16K(in=in, load=ram16L, address=address[0..14], out=ro);

    Not(in=address[14], out=nAddr14);
    And(a=nAddr14, b=address[15], out=add1514);
    And(a=load, b=add1514, out=screenLoad);
    Screen(in=in, load=screenLoad, address=[0..14], out=so);
    Keyboard(out=ko);

    Mux16(a=so, b=ko, sel=address[14], out=fo);
    Mux(a=ro, b=fo, sel=address[15], out=out);

}